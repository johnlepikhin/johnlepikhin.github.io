#+TITLE:       How-to по SELinux, базовые принципы
#+AUTHOR:      Evgenii Lepikhin
#+EMAIL:       e.lepikhin@corp.mail.ru
#+DATE:        2017-10-03 Tue
#+URI:         /blog/%y/%m/%d/how-to-по-selinux-базовые-принципы
#+KEYWORDS:    SELinux, безопасность, linux, администрирование
#+TAGS:        SELinux, безопасность, linux, администрирование
#+LANGUAGE:    ru
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: Основы SELinux и работы с ним

По работе разбирался с SELinux под CentOS, написал для себя
документацию. Решил поделиться.

* Подготовка

** Поставить пакеты (CentOS)

#+BEGIN_SRC sh
yum install setools-console policycoreutils-python
#+END_SRC

* Концепт

** Политики

Для всей системы задается <<policy>>policy, которая будет применена ко всем
объектам. По умолчанию действует политика targeted. Политика задается
в файле ~/etc/sysconfig/selinux~

Кратко:
 - targeted: всем всё разрешено, за исключением процессов, для которых
   правила явно заданы (в CentOS их довольно много, в основном сетевые
   демоны)
 - strict: то же что и targeted, только доступ ограничен и не только
   сетевым процессам
 - minimum (в CentOS ставится отдельно, пакетом
   ~selinux-policy-minimum~): targeted, только по умолчанию совсем нет
   никаких правил
 - MLS: ?

** Режимы SELinux

 - disabled: SELinux выключен
 - <<enforcing>> ~enforcing~: включен, правила блокируют, сообщения о блокировке
   уходят в ~/var/log/audit/audit.log~
 - <<permissive>> ~permissive~: ничего не блокируется, только уходят сообщения в
   ~/var/log/audit/audit.log~

Переключиться в permissive:

#+BEGIN_SRC sh
setenforce 0
#+END_SRC

Переключиться в enforcing:

#+BEGIN_SRC sh
setenforce 1
#+END_SRC

** Контексты

Каждый объект мира (файл, процесс и т.д.) имеют свойство <<context>>context. В
SELinux совершенно не важно кто и куда сделал su, fork и т.д. —
контекст наследуется до тех пор, пока явно в правилах SELinux не
сказано, что надо сменить контекст

Каждый контекст состоит из трех частей:
 1. <<user>> ~user~
 2. <<role>> ~role~
 3. <<type>> ~type~ (у процессов его принято называть <<domain>>domain, но разницы никакой нет)

Для файлов контекст можно посмотреть так:

#+BEGIN_EXAMPLE
# ls -dZ /
dr-xr-xr-x. root root system_u:object_r:root_t:s0      /
#+END_EXAMPLE

Здесь:
 - ~system_u~: user
 - ~object_r~: role
 - ~s0~: type

Аналогично, можно посмотреть для процессов:

#+BEGIN_EXAMPLE
# ps auxwZ|head -2
LABEL                           USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
system_u:system_r:init_t:s0     root         1  0.0  0.3  19236  1572 ?        Ss   10:54   0:00 /sbin/init
#+END_EXAMPLE

То, что у /sbin/init и у корневой директории одинаковый контекст ни о
чём не говорит. Права на доступ к корню у init будут только если об
этом явно сказано в правилах политики.

Точно так же можно узнать контекст текущего шелла:

#+BEGIN_EXAMPLE
# id -Z
unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
#+END_EXAMPLE

** Аудит

В режимах enforcing и permissive система пишет в лог
~/var/log/audit/audit.log~ обо всех событиях безопасности. Этот лог
полезен как при ручном создании правил, так и с помощью audit2allow.

Если auditd не запущен, сообщения уйдут в ~/var/log/messages~.

* Создание новых правил

Лучше всего это делать через написание модуля. Модуль SELinux можно
подгружать, выгружать, распространять. Удобно.

** Общий план

 - Создать новый type для запускаемого файла
 - Создать новый type, который будет domain работающего приложения
 - По умолчанию у нового домена нет никаких прав. Поэтому его можно
   запустить в permissive mode
 - С помощью audit2allow создать шаблон правил, отредактировать их.
 - Включить режим enforcing.

** Создание модуля

*** Подготовка

#+BEGIN_SRC sh
mkdir /root/selinux_my_module
cd /root/selinux_my_module
ln -s /usr/share/selinux/devel/Makefile
vim my_module.te
#+END_SRC

*** Создание минимального модуля

#+BEGIN_EXAMPLE
module my_module 1.0;

require {
  type unconfined_t;
  class process { transition sigchld };
  class file { read x_file_perms };
}

type mytype_t;
type mytype_exec_t;

role unconfined_r types mytype_t;

type_transition unconfined_t mytype_exec_t : process mytype_t;
#+END_EXAMPLE

*** Сборка и загрузка

#+BEGIN_SRC sh
make && make load
#+END_SRC

Загрузить заново после пересборки:

#+BEGIN_SRC sh
make && make reload
#+END_SRC

*** Проверка

#+BEGIN_SRC sh
cp /bin/date /root/test
chcon -t mytype_exec_t /root/test
setenforce 1
/root/test 
#+END_SRC

Сейчас у бинарника нет ни на что прав, поэтому в последней строчке
должны получить ~/root/test: Permission denied~.

*** Добавление правил с помощью <<audit2allow>>audit2allow

Утилита предназначена для генерации правил на основе лога [[Аудит][аудита]].

#+BEGIN_SRC sh
grep mytype /var/log/audit/audit.log | audit2allow -m mytype >my_module.te
#+END_SRC

Теперь можно поправить модуль, затем заново его [[*Сборка и загрузка][загрузить]].

** Полезные правила

*** Возможность менять type обратно

По умолчани

#+BEGIN_EXAMPLE
...
require {
...
   class file { ... relabelfrom ... }
}

allow unconfined_t mytype_exec_t:file { ... relabelfrom ... }
#+END_EXAMPLE

*** Базовые правила для запуска файла

#+BEGIN_EXAMPLE
# доступ к /
allow mytype_t root_t:dir search;

# разрешить unconfined_t запускать mytype_exec_t
allow unconfined_t mytype_exec_t:file { read getattr open execute };

# разрешить unconfined_t работу с процессом
allow unconfined_t mytype_t:process { siginh rlimitinh transition
noatsecure };

# разрешить unconfined_t менять контекст бинарника и переименовывать его
allow unconfined_t mytype_exec_t:file { rename relabelfrom relabelto };
allow mytype_exec_t fs_t:filesystem associate;
#+END_EXAMPLE

** Пример готового модуля

Разрешить бинарнику с type mytype_t доступ только к /tmp

#+BEGIN_EXAMPLE
module mytype 1.0;

require {
        type unconfined_t;
	type tmp_t;
	type root_t;
	type sshd_t;
	type mytype_t;
	type mytype_exec_t;
	class dir { getattr append read write lock create rename link rmdir open search };
	class file { read entrypoint getattr open execute rename relabelfrom relabelto };
	class process { siginh transition sigchld noatsecure rlimitinh };
	type user_devpts_t;
	class chr_file { open read write getattr append ioctl };
	class fd use;
	class filesystem associate;
}

#============= mytype_t ==============

# access to /
allow mytype_t root_t:dir search;

# access /tmp
allow mytype_t tmp_t:dir { getattr append read write lock create rename link rmdir open search };

# allow general context to run me
allow unconfined_t mytype_exec_t:file { read getattr open execute };

# allow general context to work with my process
allow unconfined_t mytype_t:process { siginh rlimitinh transition noatsecure };

# allow me to write to charcter device
allow mytype_t user_devpts_t:chr_file { read write getattr append ioctl };

# allow general context to switch into my context
type_transition unconfined_t mytype_exec_t : process mytype_t;
allow mytype_t mytype_exec_t:file entrypoint;

# allow me to send SIGCHLD to parent
allow mytype_t unconfined_t:process sigchld;

# allow general context to change to/from my context
allow unconfined_t mytype_exec_t:file { rename relabelfrom relabelto };


## access to pty in SSH session ##
allow mytype_t sshd_t:fd use;
#+END_EXAMPLE

Пример бинарника для тестов:

#+BEGIN_SRC c
#include <stdio.h>
#include <dirent.h>
#include <errno.h>

void ls (char *dir) {
  printf("\nNow will list %s\n", dir);

  DIR *dirp = opendir(dir);
  if (NULL == dirp) {
    printf("Error opening dir %i\n", errno);
  }

  struct dirent *dp;
  errno = 0;
  while (dirp) {
    if ((dp = readdir(dirp)) != NULL) {
      printf("%s\n", dp->d_name);
    } else {
      if (errno) {
        printf("Error readding dir %i\n", errno);
      }
      if (closedir(dirp)) {
        printf("Error closing dir %i\n", errno);
      }
      return;
    }
  }
  return;
}

int main() {
  ls ("/tmp");
  ls ("/etc");

  return 0;
}
#+END_SRC

Собирать конечно надо статиком:

#+BEGIN_SRC sh
gcc -static a.c
#+END_SRC

После этого не забыть поменять context:

#+BEGIN_SRC sh
mv a.out /tmp
chcon -t mytype_t /tmp/a.out
#+END_SRC

** Правило для policy "minimum"

Если установлен minimum, то необходимо всем пользователям роли
unconfined_r (а это в политике minumum все пользователи) доступ к [[type][типу]] mytype_t.

#+BEGIN_EXAMPLE
role unconfined_r types mytype_t;
#+END_EXAMPLE

* Ограничение только одного бинарника

 1. Поставить пакет ~selinux-policy-minimum~ (CentOS)
 2. Прописать этот policy в ~/etc/selinux/config~
 3. reboot (может быть долгим если начнется relabeling)
 4. Создать [[Создание минимального модуля][модуль]], не забыть про [[Правило для policy "minimum"]]

* Полезные ссылки

- [[http://fedoraproject.org/wiki/PackagingDrafts/SELinux#Creating_new_types][Creating new types]]
- [[https://selinuxproject.org/page/ObjectClassesPerms][ObjectClassesPerms]]
- [[https://habrahabr.ru/post/332886/][Темные моменты SELinux]]
