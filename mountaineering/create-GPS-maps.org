#+TITLE:       Создание своих карт для GPS
#+AUTHOR:      Evgenii Lepikhin
#+EMAIL:       johnlepikhin@gmail.com
#+DATE:        2017-11-04 Сб
#+URI:         /blog/%y/%m/%d/создание-своих-карт-для-gps
#+KEYWORDS:    GPS, карта, картография, OSM
#+TAGS:        GPS, картография
#+LANGUAGE:    ru
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: О том, как рисовать и создавать свои для GPS
#+INCLUDE: "~/.emacs.d/public/blog/setup.org"

* Предисловие

В районе 2005 года друг научил меня рисовать карты для GPS. Тогда это
был Большой-Большой Секрет, потому что никаких OpenStreetMap не
существовало, Google Maps был только в далёком проекте, и люди на
создании карт для Garmin GPS строили целые бизнесы. Типичный набор
софта для создания карт выглядел примерно так[fn::естественно всё
пиратское т.к. ценник потянуло бы не каждое юр.лицо]: MapInfo Pro,
cgpsmapper, globalmapper, mapedit и чёрт знает что ещё. В качестве
источника данных использовался наложенный слой Генштаба или другой
советской карты, спутниковые многодиапазонные снимки LandSat (отличная
штука, кстати) и данные высот из [[http://srtm.csi.cgiar.org/][SRTM]]. С тех пор в IT сменилось
несколько эпох и рисование карт стало деятельностью, доступной
практически каждому, «без регистрации и SMS».

Две недели назад имел сомнительное удовольствие рисовать карту для [[http://mmb.progressor.ru/?RaidId=30][ММБ
2017/осень]]. Поскольку процесс по-прежнему далек от user friendly,
поэтому решил написать эту статью.

* Общий план

Сейчас за основу принято брать готовый вектор из [[http://openstreetmap.org][OSM]]. Способов
скачивания куска карты написано в их [[https://wiki.openstreetmap.org/wiki/downloading_data][вики]] довольно много. Дальнейший
план:

 1. Нарисовать свои детали
 2. Добавить данные SRTM[fn::Sparital Radar Topology Mission —
    многолетняя программа NASA по съёмке относительных высот
    поверхности земли. На 2017 год есть полное покрытие планеты по
    сетке с шагом 30 метров].
 3. Создать стиль отрисовки элементов карты на приборе Garmin
 4. Скомпоновать карту
 5. Залить на прибор

* Рисование

Тут всё просто, выбираем любой понравившийся редактор OSM и рисуем. Я
остановился на [[https://josm.openstreetmap.de/][josm]]. Важно выбрать какую-нибудь хорошую подложку. К
сожалению, Yandex.Карты или Google Maps использовать нельзя из-за
лицензионных ограничений. Но есть много неплохих альтернатив,
доступных прямо в josm.

В OSM все объекты имеют набор атрибутов в виде ~ключ=значение~. Таких
атрибутов у объекта может быть от нуля до бесконечности. По ним
дальнейшие утилиты поймут что вы имели ввиду, нарисовав вон тот
большой многоугольник. По большому счёту, их можно выставлять любыми,
однако рекомендую использовать [[http://wiki.openstreetmap.org/wiki/Map_Features][стандартные]]. Это спасёт вас от
наступления на давно известные грабли, а также позволит в дальнейшем
экспортировать ваши изменения обратно в OSM.

* Добавление данных высот

Тут проще всего воспользоваться Windows утилитой [[http://wiki.openstreetmap.org/wiki/Srtm2Osm#Download][Srtm2osm]]. Она возьмёт
заданную URL'ом область из OSM, скачает для неё данные SRTM, сама
преобразует их в формат OSM.

Выглядит это примерно так:

#+begin_src sh
Srtm2Osm.exe -bounds3 'http://www.openstreetmap.org/export#map=12/43.0626/43.1251' -cat 600 200 -step 40
#+end_src

Здесь:
 - URL скопирован из браузера и показывает кусок, для которого
   хотелось бы получить линии высот.
 - ~-cat 600 200~ шаг в метрах высоты для мажорных и средних линий
   высот.
 - ~-step 40~ шаг в метрах высоты для минорных линий высот.

На выходе у нас получится файл ~srtm.osm~.

* Стили карты

Новая для меня тема и одновременно большое приятное открытие, что это
оказывается возможно! Это радикально улучшает читаемость карты. И я бы
сказал, что на последнем ММБ нормально отрисованный стиль дал больше,
чем весь мой вклад непосредственно в картографию района.

Проблема в том что не может быть стиля, который универсально подойдет
для всех целей. Автомобилисту на трассе просеки на фиг не нужны, а у
ММБшника в них смысл жизни. Но вы только посмотрите, насколько
прекрасно может выглядеть карта, в которой попытались нарисовать
универсальный стиль:

{{{img_center(Взял у http://pinns.co.uk/osm/styles.html, ./images/garmin-typ-sample.jpg)}}}

** Как это работает

С одного конца у нас OSM-карта, где у всех объектов есть атрибуты, я
писал о них [[*Рисование][выше]]. С другого конца имеем будущую карту для Garmin в
формате IMG, где есть свои ID типов объектов. Причем, если
идентификаторы типов линий и полигонов на некоторых приборах судя по
всему можно задавать свои, то для точек, судя по всему, ID должны быть
как завещал Garmin. Их примерный [[http://wiki.openstreetmap.org/wiki/GroundTruth_Standard_Garmin_Types][список]].

Наша задача:
 1. Сопоставить по каким-то правилам атрибуты объектов в OSM с ID
    типов в Garmin.
 2. Нарисовать для них картинки.

** Рисование картинок

Начну во второго пункта программы т.к. без него невозможен
первый. Картинки — по сути битмапы — имеют формат 32xN пикселей (N от
1 до 32) и два цвета[fn::на самом деле, цветов может быть больше, но я
пока не стал разбираться], один из которых может быть
прозрачным. Формат хранения [[https://ru.wikipedia.org/wiki/X_Pixmap][XPM]] (тут все фотошоперы поперхнулись
смузи, а программисты на ANSI C ехидно потёрли руки). Я рисовал их в
Gimp. Важно проверить после сохранения, что цветов получилось именно
два, поскольку Gimp иногда в этом месте умничает.

Отдельно про линии. Линии рекомендую рисовать толщиной[fn::В контексте
картинки правильнее сказать, что у линий на карте есть не толщина, а
высота, поскольку ширина картинки у нас всегда 32 пикселя) от 3
пикселей и шире: иначе не смотрятся.

** Сопоставление атрибутов OSM идентификаторам в Garmin

Вы можете воспользоваться готовым софтом для Windows для рисования
стилей карт для Garmin[fn::ключевые слова для поиска: TYP file editor,
Garmin map style editor]. Но он мне показался мягко говоря убогим —
начиная с того, что они предлагают все картинки рисовать в своём
встроенном редакторе.

Сначала нам надо сопоставить атрибуты OSM конечным идентификаторам в
Garmin. Для этого нужна директория (назовите её как вам удобно) с
примерно таким содержимым:

#+begin_example
lines
points
polygons
version
#+end_example
(есть и другие файлы, но меня он не коснулись)

Здесь version содержит просто циферку, а ~lines~, ~points~ и
~polygons~ описывают правила преобразования. Правила выглядят так:

#+begin_example
(landuse=farmland | landuse=farmyard) [0xa resolution 18]
landuse=industrial [0xb resolution 18]
landuse=quarry [0xc resolution 18]
#+end_example

На самом деле, выбор стиля для объекта — большая и очень больная тема
в картографии; не стоит рисовать реки поверх дорог, дороги поверх
туннелей, ручьи в мелком масштабе (но на самом деле надо, если у нас
гидрография) и т.д. Но для нашего маленького заводика по +утилизации
промышленных отходов+ производству карт для outdoor все эти детали
перфекциониста можно опустить.

Специально для перфекционистов оставлю боль и ссылку на [[http://www.mkgmap.org.uk/doc/pdf/style-manual.pdf][мануал]]. Для
остальных достаточно понять, что есть ~ключ=значение~ объектов OSM,
есть булева логика и есть Garmin ID, который совпадающим в заданным
правилом объектам надо присвоить.

Тут важно понять, что на этом этапе вы выбираем, какие элементы
исходной карты мы хотим видеть на своей конечной карте. Своеобразный
grep+map+fold.

** Сопоставление Garmin ID конкретной картинке (TYP файл)

Недавно мы нарисовали кучу офигенных картинок чумовом формате XPM. И
мы не можем дождаться момента, когда эти маленькие Моны и Лизы
размером 32 на 32 сохранённые в виде Цэ исходников появятся на экране
Garmin. Для этого необходимо сопоставить их ID типов в
Garmin. Открываем текстовый редактор и создаем файл ~style-typ.txt~:

#+begin_src ini
[_id]
FID=156
CodePage=1251
[end]

[_drawOrder]
Type=0xa,6
Type=0xb,6
Type=0xc,6
Type=0xd,6
Type=0xe,6
Type=0xf,15
... и т.д. ...

end]

[_polygon]
Type=0xa
String1=0x19,some area
Xpm="32 32 2 1"
"       c #A72300"
".      c #000000"
"           .                    "
"          ...                   "
"           .                    "
"                                "
"       .        .               "
"      ...      ...          .   "
"       .        .          ...  "
"                            .   "
"                                "
"                                "
"                                "
"                                "
"                                "
"                 .        .     "
"                ...      ...    "
"     .      .    .        .     "
"    ...    ...                  "
"     .      .                   "
"                                "
"                                "
"                                "
"              .                 "
"             ...       .        "
"      .       .       ...       "
"     ...               .        "
"      .                         "
"                                "
"                  .             "
"                 ...            "
"                  .           . "
"                             ..."
"                              . "

[end]

... и т.д. ...

[_line]
Type=0x34
String1=0x19,some line
Xpm="32 4 2 1"
".      c #000000"
"+      c #4A4A4A"
"................................"
"++++++++++++++++++++++++++++++++"
"++++++++++++++++++++++++++++++++"
"................................"

[end]

... и т.д. ...

#+end_src

«Здравствуй, ад!».

В секции ~[_id]~ указываем кодировку и идентификатор стиля. _Регистр
ключевых слов важен!_

В секции ~[_drawOrder]~. Описываем все использованные Garmin ID и их
приоритет при отрисовке. Чем больше число, тем выше приоритет.

Далее идет серия секций с именами ~[_polygon]~, ~[_line]~ и
~[_point]~, где мы описываем всё, над чем так долго работали в этих
наших фотошопах:
 - ~Type~: Garmin ID
 - ~String1~: код языка (для русского 0x19) и название типа, например
   "просека". Обратите внимание, что у нас CodePage=1251, кодировка
   файла должна соответствовать!
 - ~Xpm~: наша картинка без Цэ-заголовка.

Ура, стиль готов! В разделе [[*Компоновка карт в итоговый файл][Компоновка карт в итоговый файл]] вы
узнаете, как теперь эту шаткую конструкцию можно преобразовать в
карту, а в нижеследующем разделе узнаете, как я попытался от этого ада
избавиться с помощью Emacs и чуть-чуть Perl.

** Наводим порядок в стиле

В [[https://ru.wikipedia.org/wiki/Emacs][Емаксе]] есть такой замечательный режим — [[http://orgmode.org/][org-mode]]. Вероятно
первоначально он создавался для организации закладок и записок, но
сейчас в нём создают блоги (и я тоже), составляют списки дел,
учитывают табельное время, пишут документацию, статьи и книги,
применяют в качестве альтернативы MS Excel. Короче говоря, всё что
можно структурировать можно запихнуть и в документ org-mode. При этом,
org-документ остается простым текстовым файлом, который легко парсить
и редактировать чем угодно. Кроме того, Emacs сам по себе умеет
показывать картинки прямо в тексте.

Я не смог не воспользоваться такой замечательной возможностью и решил
составлять свой первый стиль в формате org. Как это выглядит, можете
посмотреть на примере моего [[https://raw.githubusercontent.com/johnlepikhin/garmin-styles-org/master/rogain/rogain.org][стиля для рогейнов]] (картинки лежат
[[https://github.com/johnlepikhin/garmin-styles-org/tree/master/rogain/imgs][рядом]]). В Emacs это выглядит довольно прилично:

{{{img_center(Внешний вид получившегося документа, ./images/orgmode-to-garmin-screenshot01.png)}}}

Для генерации конечных файлов написал Perl-[[https://github.com/johnlepikhin/org-to-garmin-style][скрипт]]. К сожалению, до
следующего рисования карт нет никакой мотивации выводить его из
глубокой бета-версии. Тем не менее, он работает, генерит директорию с
polygons, lines, points, mkgmap-config.txt и style-typ.txt, указывает
на какой-то небольшой набор ошибок.

Что делать с получившимся выхлопом скрипта читайте в следующем разделе.

** Полезные ссылки по главе (больше мне для изучения)

 - [[http://www.pinns.co.uk/osm/docs/garmincolors.pdf][Garmin Colour Palette & XPM]]
 - [[http://www.pinns.co.uk/osm/docs/multicolored.pdf][Multi Coloured Polygons on Garmin devices/maps]]

* Компоновка карт в итоговый файл

Для этого нам понадобится [[http://www.mkgmap.org.uk/][mkgmap]] — утилита, умеющая на самом деле
довольно много интересных штук, но главное способная преобразовать OSM
в Garmin IMG.

Мой конфиг для неё выглядит примерно так (пусть имя файла будет mkgmap-config.txt):

#+begin_example
generate-sea: land-tag=natural=background
location-autofill: is_in,nearest
housenumbers
tdbfile
show-profiles: 1
ignore-maxspeeds
add-pois-to-areas
add-pois-to-lines
link-pois-to-ways
make-opposite-cycleways
process-destination
process-exits
preserve-element-order
net
route
index
nsis
gmapsupp
style-file=/path/to/my-garmin-style
unicode
family-id=156
code-page=1251
#+end_example

Здесь ~style-file~ — это путь до _директории_ с [[*Сопоставление
атрибутов OSM идентификаторам в Garmin][правилами преобразования
стиля]].

Перехожу в каталог с OSM файлами и запускаю:

#+begin_src sh
java -jar mkgmap.jar -c mkgmap-config.txt --description='Bezengi - my map' style-typ.txt *.osm
#+end_src

Откуда взялся ~style-typ.txt~ смотрите выше в [[*Сопоставление Garmin ID конкретной картинке (TYP файл)][главе про TYP файлы]].

В ~--description~ рекомендую дать своё описание карты — оно будет
показано в меню выбора карты на приборе.

На выходе получится несколько IMG файлов и нужный нам ~gmapsupp.img~
(убедитесь, что соответствующая опция включена в конфиге). Этот файл
как есть закидываем в директорию Garmin на устройстве. На современных
приборчиках файл можно как-нибудь по-своему назвать.

** splitter

Для старых приборов также имеет смысл поделить картинку на логические
квадраты, работать карта будет быстрее. Это можно сделать с помощью
утилиты [[http://www.mkgmap.org.uk/download/splitter.html][splitter]]. Использовать её примерно так:

#+begin_src sh
java -jar splitter.jar --num-tiles=25 --mapid=1234000 --keep-complete=false map.osm
#+end_src

Здесь:
 - ~--num-tiles=25~ разбить карту на 25 кусочков. Чем меньше кусочек,
   тем проще с ним дружить приборчику, но тем чаще придется подгружать
   другие кусочки при скроллинге карты.
 - ~--mapid=12340000~ кусочки будут иметь ID 12340000, 12340001 и
   т.д. _Важно!_ У каждой карты на приборе должен быть свой уникальный
   идентификатор. Как этого достичь — задача для вашей фантазии.
 - ~--keep-complete=false~. Если линия или полигон выходит за пределы
   тайла, то обрезать её. Это может создать проблемы с построением
   маршрутов и отрисовкой, зато очень большие объекты не добавят
   тормозов.
